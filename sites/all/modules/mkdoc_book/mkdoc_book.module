
<?php

$GLOBALS['dataFolder'] = "";
$GLOBALS['bookNodeId'] = 'new';
$GLOBALS['mapMkdoc'] = array();

function mkdoc_book_menu()
{
	$items = array();
	$items['mkdoc_book/new'] = array(
		     'title' => 'gdc book',
			 'page callback' => 'mkdoc_book_new',
			 'access arguments' => array(true),
			 'access callback' => TRUE,
			 'type' => MENU_CALLBACK
			 );

	return $items;

}

function mkdoc_book_new() {
	//pass the location of the json file, $_POST will have the value
	//read the json file http://php.net/manual/en/function.json-decode.php
	dsm($_SERVER);
	dsm($_POST);
	var_dump($_POST);
	$GLOBALS["dataFolder"] = $_POST["datafolder"]."/docs/";

    //create a book node
	createNewBook($_POST['name']);
	
    //foreach page
		//create a page node
	return "Im here----".$_POST['name'];	

}

class MkDoc
{
	public $siteName;
	public $bookId;
	private $pagesByNodeId = array();
	private $pagesByLinkName = array();

	private static $instance = NULL;

	public static function getInstance() {
		if(is_null(self::$instance)) {
			self::$instance = new self();	
		}

		return self::$instance;
	}

	public function savePageByNodeId($nodeId, $value) {
		$pagesByNodeId[$nodeId] = $value;
	}

	public function getPageByNodeId($nodeId) {
		return $pagesByNodeId[$nodeId];	
	}

	public function savePageByLinkName($name, $value) {
		$pagesByLinkName[$name] = $value;
	}

	public function getPageByLinkName($name) {
		return $pagesByLinkName[$name];	
	}
}

function createNewBook($name) {
	$file = file_get_contents($name);
	//var_dump($file);
	//var_dump(base64_decode($file));
	$data = json_decode(base64_decode($file), true);
	//var_dump($data['site_name']);

	createBookNode($data);
}

function createBookNode($data) {
	
	$node = new stdClass();
	$node->book = array('bid'=>'new');
	
	$node->name = $data['site_name']; 
	$node->title = $node->name; 
	//$node->body = json_encode($data['pages']); 
	$node->type = 'book';
	$node->created = time(); 
	$node->changed = $node->created; 
	$node->promote = 0; 
	$node->sticky = 0; 
	$node->format = 2;
	$node->status = 1;
	$node->language = 'en';

	node_save($node);
	$bookNodeId = $node->nid;

	$mkdoc = MkDoc::getInstance();
	$mkdoc->siteName = $node->name;
	$mkdoc->bookId = $bookNodeId;

	$GLOBALS['bookNodeId'] = $bookNodeId;

	$yamlPageContent = json_encode($data['pages']);
	//createNewPage($bookNodeId, $yamlPageContent);
	createNewPageEx($bookNodeId, $yamlPageContent);
}

function createNewPageEx($bookNodeId, $yamlPageContent) {
	$yamlObj = json_decode($yamlPageContent);

	parseObject($bookNodeId, $yamlObj, NULL);
	//preg_match($yamlPageContent)	
}

function parseObject($bookNodeId, $obj, $parentId) {
	echo "=================";
	
	$mkdoc = MkDoc::getInstance();
	foreach($obj as $chapter => $chapterValue) {

		var_dump($chapter);
		//echo "***********";
		//var_dump($chapterValue);

//echo "----------------CHAPTER-------------------";
		if(is_array($chapterValue)) {
			$saveObj = new stdClass();
			$saveObj->parentId = $parentId;
			
			$parentId = createPageNodeEx($bookNodeId,$parentId, $chapter, $chapter);
			$saveObj->nodeId = $parentId;
			$saveObj->title = $chapter;
			$mkdoc->savePageByNodeId($parentId, $saveObj);

			parseObject($bookNodeId, $chapterValue, $parentId);	
		}

		$attr = is_object($chapterValue) ? get_object_vars($chapterValue) : $chapterValue;

		foreach($attr as $key => $val) {
			print($key.'------'.$val.'-------is md link:'.isMdLink($val));
			$saveObj = new stdClass();
			$saveObj->parentId = $parentId;

			if(isMdLink($val)) {
				$folder = $GLOBALS["dataFolder"].$val;
				echo "*************md link********".$folder;
				$parentId = createPageNode($bookNodeId, $parentId, $key, $val, $folder);	

			} else {

				$parentId = createPageNodeEx($bookNodeId, $parentId, $key, $key);
			}

			$saveObj->nodeId = $parentId;
			$saveObj->title = $key;
			$mkdoc->savePageByNodeId($parentId, $saveObj);
		}
			
	}
	
}

function isMdLink($link) {
	return preg_match('/([^"]*\.md)/', $link) > 0;	
}

function getNodeId($matches) {
   //echo '=================';
   $matches[0] = str_replace('\\', '', $matches[0]);
   $matches[1] = str_replace('\\', '', $matches[1]);
   var_dump($matches);
	$folder = $GLOBALS["dataFolder"].$matches[1];
	print( $folder);

	$nid = createPageNode($GLOBALS['bookNodeId'], $matches[1], $folder);
	$matches[0] = "node/".$nid;
	$hrefa = "<a href=".$matches[0].">".$matches[1]."</a>";
	return $hrefa;
}

function createNewPage($bookId, $file) {
	//$file = file_get_contents($name);
	//var_dump($file);

    //$ret = preg_replace_callback('/"([^"]*\.md)"/', "getNodeId", $file);
	

    $ret = preg_replace_callback('/"([^"]*\.md)"/', function($matches) {
		
		$matches[0] = str_replace('\\', '', $matches[0]);
		$matches[1] = str_replace('\\', '', $matches[1]);
		//var_dump($matches);
		$folder = $GLOBALS["dataFolder"].$matches[1];
		//print( $folder);

		$nid = createPageNode($bookId, $matches[1], $folder);
	
		savePageInfo($bookId, $nid, $name);

		$matches[0] = "node/".$nid;
		$hrefa = "<a href=".$matches[0].">".$matches[1]."</a>";
		return $hrefa;
	

	}, $file);
	
	var_dump($ret);
	
	//updateBookNode($bookId, $ret);

}

function savePageInfo($bookId, $nid, $name) {
	
}

function createPageNodeEx($bookId, $parentId, $title, $content) {

	if($bookId === NULL) {
		$bookId = 'new';	
	}
	$node = new stdClass();
	$node->book = array('bid'=>$bookId);
	$node->name = $title; 
	$node->title = $node->name; 
	$node->body = $content; 
	$node->type = 'page'; 
	if($parentId !== NULL) {
		$node->parent = $parentId;
	}
	$node->created = time(); 
	$node->changed = $node->created; 
	$node->promote = 0; 
	$node->sticky = 0; 
	$node->format = 2;
	$node->status = 1;
	$node->language = 'en'; 

	node_save($node);
	//echo "----------------".$node->nid;
	return $node->nid;

}

function createPageNode($bookId, $parentId, $title, $fileName, $fileNameWithFolder) {
	echo $fileName;
	$filemd = file_get_contents($fileNameWithFolder);
	//echo "================";
	//echo ($filemd);
	//echo "================";

	if($bookId === NULL) {
		$bookId = 'new';	
	}
	$node = new stdClass();
	$node->book = array('bid'=>$bookId);
	$node->name = $title; 
	$node->title = $node->name; 
	$node->body = $filemd; 
	$node->type = 'page'; //or ‘page’
	if($parentId !== NULL) {
		$node->parent = $parentId;
	}
	$node->created = time(); 
	$node->changed = $node->created; 
	$node->promote = 0; 
	$node->sticky = 0; 
	$node->format = 2;
	$node->status = 1;
	$node->language = 'en'; 

	node_save($node);
	//echo "----------------".$node->nid;
	return $node->nid;

}

function updateBookNode($bookId, $content) {

	$node = node_load($bookId);

	
	$node->body = $content; 
	$node->changed = $node->created; 

	node_save($node);
	
}



